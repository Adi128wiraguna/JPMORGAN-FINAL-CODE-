import urllib2
import time
import json
import random

# Server API URLs
QUERY = "http://localhost:8080/query?id={}"
ORDER = "http://localhost:8080/order?id={}&side=sell&qty={}&price={}"

# Strategy config.  We will attempt to liquidate a position of INVENTORY shares,
# by selling ORDER_SIZE @ top_bid - ORDER_DISCOUNT, once every N seconds.
ORDER_DISCOUNT = 10
ORDER_SIZE     = 200
INVENTORY      = 1000



def getDatapoint(quote):
		stock = quote
		bid_price = float(quote['top_bid']['price'])
		ask_price = float(quote['top_ask']['price'])
		price = (bid_price + ask_price)/2
		return stock, bid_price, ask_price, price
		print "Quoted at %s" % price


def getRatio(price_a, price_b):
		if(price_b == 0):
				return
		return price_a/price_b
		price = float(quote['top_bid']['price'])
		order_args = (ORDER_SIZE, price - ORDER_DISCOUNT)
		print "Executing 'sell' OF {:,}@{:,}".format (*order_args)
		url = ORDER.format(random.random(), *order_args)
		order = json.loads(urllib2.urlopen(url).read())

		# Update the PnL if the order was filled.
		if order['avg_price'] > 0:
			price    = order['avg_price']
			notional = float(price * ORDER_SIZE)
			Pnl = Pnl + notional
			Qty = Qty - ORDER_SIZE
			print "Sold {:,} for ${:,}/share, ${:,} notional".format(ORDER_SIZE, price, notional)
			print "PnL ${:,}, Qty {:,}".format(Pnl, Qty)
		else:
			print "Unfilled order; $%s total, %s qty" % (Pnl, Qty)

		time.sleep(1)
N = 5
# Main
if __name__ == "__main__":	
	for _ in xrange(N):
		quotes = json.loads(urllib2.urlopen(QUERY.format(random.random())).read())
		prices = {}
	for quote in quotes:	
		getDatapoint(quotes) = stock, bid_price, ask_price, price
		prices[stock] = price
		return stock, bid_price, ask_price, price
		print "Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price)	
		print "Ratio %s" % getDatapoint(prices['ABC'], prices ['DEF'])

import unittest
from client import getDatapoint

class ClientTest(unittest.TestCase):
  def test_getDataPoint_calculatePrice(self):
    quotes = [
      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
    ]
  for quote in quotes:
    self.assertEqual(getDatapoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['toop_bid']['price']+quote['top_ask']['price'])/2))

  def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
    quotes = [
      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
    ]
    self.assertEqual(getDatapoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['toop_bid']['price']+quote['top_ask']['price'])/2))


  """ ------------ Add more unit tests ------------ """



if __name__ == '__main__':
    unittest.main()
